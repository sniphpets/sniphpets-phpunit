priority -40

global !p
import sniphpets
endglobal

snippet pucase "PHPUnit / Test case" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use `!v sniphpets#unittest#resolve_alternate()`;
use PHPUnit\Framework\TestCase;

class `!v sniphpets#basename()` extends TestCase
{
	${VISUAL}${0}
}
endsnippet

snippet pucase5 "PHPUnit 5 / Test case" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

class `!v sniphpets#basename()` extends \PHPUnit_Framework_TestCase
{
	${VISUAL}${0}
}
endsnippet

snippet putest "PHPUnit / Test method" b
public function test${1}()
{
	${VISUAL}${0}
}
endsnippet

snippet putestdepends "PHPUnit / Test method with dependency" b
/**
 * @depends ${1}
 */
public function test${2}(${3})
{
	${VISUAL}${0}
}
endsnippet
snippet putestprovider "PHPUnit / Test method with data provider" b
/**
 * @dataProvider ${1}
 */
public function test${2}(${3})
{
	${VISUAL}${0}
}

public function $1()
{
	yield;
}
endsnippet

snippet pua "PHPUnit / Assert" b
\$this->assert${1}(${2});
endsnippet

snippet putrue "PHPUnit / Assert true" b
\$this->assertTrue(${1});
endsnippet

snippet pufalse "PHPUnit / Assert false" b
\$this->assertFalse(${1});
endsnippet

snippet punull "PHPUnit / Assert null" b
\$this->assertNull(${1});
endsnippet

snippet pusame "PHPUnit / Assert same" b
\$this->assertSame(${1}, ${2});
endsnippet

snippet puequals "PHPUnit / Assert equals" b
\$this->assertEquals(${1}, ${2});
endsnippet

snippet pucount "PHPUnit / Assert count" b
\$this->assertCount(${1}, ${2});
endsnippet

snippet pucontains "PHPUnit / Assert contains" b
\$this->assertContains(${1}, ${2});
endsnippet

snippet puinstance "PHPUnit / Assert instance of" b
\$this->assertInstanceOf(${1}::class, ${2});
endsnippet

snippet puincomplete "PHPUnit / Mark incomplete" b
\$this->markTestIncomplete(${1:'This test has not been implemented yet.'});
endsnippet

snippet puskip "PHPUnit / Mark skipped" b
\$this->markTestSkipped(${1:'This test has been skipped.'});
endsnippet

snippet pufail "PHPUnit / Fail" b
\$this->fail(${1});
endsnippet

snippet puexception "PHPUnit / Expect exception" b
\$this->expectException(${1}::class);
\$this->expectExceptionMessage('${2}');
endsnippet

snippet pustub "PHPUnit / Create stub" b
\$${2:`!p snip.rv = sniphpets.lcfirst(t[1])`} = \$this->createMock(${1}::class);
\$$2
	->method('${3}')
	->will(\$this->returnValue(${4}));
endsnippet

snippet pufake "PHPUnit / Create fake" b
\$${2:`!p snip.rv = sniphpets.lcfirst(t[1])`} = \$this->createMock(${1}::class);
\$$2
	->method('${3}')
	->will(\$this->returnCallback(
		function (${4}) {
			${5}
		}
	));
endsnippet

snippet pumock "PHPUnit / Create mock" b
\$${2:`!p snip.rv = sniphpets.lcfirst(t[1])`} = \$this->createMock(${1}::class);
endsnippet

snippet pumockbuilder "PHPUnit / Mock builder" b
\$${2:`!p snip.rv = sniphpets.lcfirst(t[1])`} = \$this
	->getMockBuilder(${1}::class)
	->setMethods([${2}])
	->disableOriginalConstructor()
	->getMock();
endsnippet

snippet pumockdoc "PHPUnit / Mock Object doc"
/**
 * @var \PHPUnit_Framework_MockObject_MockObject
 */
endsnippet

snippet puexpects "PHPUnit / Expects" b
\$${1}
	->expects(\$this->${2:once}())
	->method('${3}')
endsnippet

snippet puwill "PHPUnit / Will" i
->will(\$this->${1}(${2}));
endsnippet

snippet puwillreturn "PHPUnit / Will return" i
->will(\$this->return${1:Value}(${2}));
endsnippet

snippet puwillvalue "PHPUnit / Will return value" i
->will(\$this->returnValue(${1}));
endsnippet

snippet puwillargument "PHPUnit / Will return argument" i
->will(\$this->returnArgument(${1}))
endsnippet

snippet puwillcallback "PHPUnit / Will return callback" i
->will(\$this->returnCallback(${1:function (${2}) {${3}})})
endsnippet

snippet puwillconsecutive "PHPUnit / Will conscutive calls" i
->will(\$this->onConsecutiveCalls(${1}))
endsnippet

snippet puwillexception "PHPUnit / Will throw exception" i
->will(\$this->throwException(new ${1:\Exception}))
endsnippet

snippet puwillself "PHPUnit / Will return self" i
->will(\$this->returnSelf())
endsnippet

snippet puwillmap "PHPUnit / Will return value map" i
->will(\$this->returnValueMap(${1}))
endsnippet
